// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Expense {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(128)
  amount    Float
  code      String   @db.Char(3)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  paidBy   User   @relation("paid", fields: [paidById], references: [id], onDelete: Cascade)
  paidById String

  oweBy   User   @relation("owe", fields: [oweById], references: [id], onDelete: Cascade)
  oweById String

  @@index([paidById])
  @@index([oweById])
  @@map(name: "expenses")
}

model ExpenseCounter {
  id          String   @id @default(cuid())
  totalAmount Float    @default(0)
  code        String   @db.Char(3)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  userPlus   User   @relation("user_plus", fields: [userPlusId], references: [id], onDelete: Cascade)
  userPlusId String

  userMinus   User   @relation("user_minus", fields: [userMinusId], references: [id], onDelete: Cascade)
  userMinusId String

  @@unique([userPlusId, userMinusId, code])
  @@index([userPlusId])
  @@index([userMinusId])
  @@map(name: "expenses_counter")
}

model Friend {
  id         String   @id @default(uuid())
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  approaching   User   @relation("approached", fields: [approachingId], references: [id], onDelete: Cascade)
  approachingId String

  approached   User   @relation("approachedBy", fields: [approachedId], references: [id], onDelete: Cascade)
  approachedId String

  @@unique([approachingId, approachedId])
  @@index([approachingId])
  @@index([approachedId])
  @@map(name: "friends")
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  users GroupsOnUsers[]

  @@map(name: "groups")
}

model GroupsOnUsers {
  id        String   @id @default(cuid())
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([userId])
  @@index([groupId])
  @@map(name: "groups_on_users")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts     Account[]
  sessions     Session[]
  groups       GroupsOnUsers[]
  approached   Friend[]         @relation("approached")
  approachedBy Friend[]         @relation("approachedBy")
  paid         Expense[]        @relation("paid")
  owe          Expense[]        @relation("owe")
  userPlus     ExpenseCounter[] @relation("user_plus")
  userMinus    ExpenseCounter[] @relation("user_minus")

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  @@map(name: "users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
